//디폴트는 함수 오버로딩으로 하나하나 지정할 수도 있다. 그런 수고를 줄이기 위해 존재하는 기능이다.
//디폴트 기준을 잡았을 때, void 함수를 오버로딩하면 두 가지가 충돌하게 된다.

//inline 함수 : 프로그램 코드라인 안에 들어가 버린 함수. inline int (함수 이름) {내용}
//매크로 함수 : 함수처럼 인자를 설정할 수 있는 매크로. #define (매크로 함수 이름) (매크로 함수 기능)

//매크로 함수의 주의점. 사칙연산의 순서로 계산하기 때문에 곱셈과 나눗셈의 매크로는 괄호를 반드시 붙이는 것이 좋다.
//#이나 ""를 붙이는 것으로 연산자를 문자열로 바꿀 수 있다. ##를 인자 사이에 두면 그대로 인자들을 붙여서 출력할 수 있다.
//인라인 함수는 매크로 함수를 일일이 정의하기가 복잡하다는 문제를 개선하기 위한 기능이다.
//단, 매크로만의 장점이 있다면, 자료형에 의존하지 않는다는 점이다. 인자에 들어간 것에 맞춰 자료형이 달라진다. 어떠한 경우에도 데이터 손실이 없다.
//cpp에서는 템플릿을 이용하면 인라인 함수로도 자료형에 의존하지 않는 함수를 만들 수 있다.

#include <iostream>

template <typename T>//자료형을 인자에 맞춰 유동적으로 바꿀 수 있는 템플릿인 typename
inline T SQUARE(T x)//T를 유동적인 자료형으로 취급하고, 자료형 자리를 대신하면 된다.
{
	return x * x;//인라인 함수에선 자동으로 x에 괄호 취급이 된다.
}

int main()
{
	std::cout << SQUARE(5.5) << std::endl;//int형과 double형을 유동적으로 오갈 수 있다.
	std::cout << SQUARE(12+1) << std::endl;//괄호 취급의 증명
	return 0;
}